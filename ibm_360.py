# -*- coding: utf-8 -*-
"""IBM 360.ipynb

Automatically generated by Colaboratory.


"""

!git clone https://github.com/Trusted-AI/AIX360

cd /content/AIX360

!pip install -e .

from sklearn.datasets import load_breast_cancer
bc = load_breast_cancer()
import pandas as pd
bc_df = pd.DataFrame(bc.data, columns=bc.feature_names)
bc_df.head()

bc_df.columns

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(bc_df, bc.target, test_size = 0.2, random_state = 31)
from aix360.algorithms.rbm import FeatureBinarizer
fb = FeatureBinarizer(negations=True)
X_train_fb = fb.fit_transform(X_train)
X_test_fb = fb.transform(X_test)
X_train_fb['mean radius'][:8]

from aix360.algorithms.rbm import BRCGExplainer, BooleanRuleCG
boolean_model = BooleanRuleCG(silent=True)
explainer = BRCGExplainer(boolean_model)
explainer.fit(X_train_fb, Y_train)
Y_pred = explainer.predict(X_test_fb)
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
print(f'Accuracy = {accuracy_score(Y_test, Y_pred)}')
print(f'Precision = {precision_score(Y_test, Y_pred)}')
print(f'Recall = {recall_score(Y_test, Y_pred)}')
print(f'F1 = {f1_score(Y_test, Y_pred)}')
explainer.explain()

e = explainer.explain()
isCNF = 'Predict Y=0 if ANY of the following rules are satisfied, otherwise Y=1:'
notCNF = 'Predict Y=1 if ANY of the following rules are satisfied, otherwise Y=0:'
print(isCNF if e['isCNF'] else notCNF)
print()
for rule in e['rules']:
    print(f'  - {rule}')

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import OneHotEncoder
from aix360.algorithms.protodash import ProtodashExplainer, get_Gaussian_Data

data=bc_df[["mean radius","mean texture","mean area", "area error","worst area","worst concavity","concave points error"]]
data["target"]=bc.target
data.head()

data_numpy = data.to_numpy()
explainer = ProtodashExplainer()
(W, S, setValues) = explainer.explain(data_numpy,data_numpy, m=2, sigma=2)
inc_prototypes =data.iloc[S, :].copy()
# Compute normalized importance weights for prototypes
inc_prototypes["Weights of Prototypes"] = np.around(W/np.sum(W), 2) 
inc_prototypes

test=data[1:2]
test

test_numpy=test.to_numpy()
explain1 =data.drop([1])
explain =data.drop([1]).to_numpy()
explainer = ProtodashExplainer()
(W, S, setValues) = explainer.explain(test_numpy,explain, m=1, sigma=2)
inc_prototypes =explain1.iloc[S, :].copy()
# Compute normalized importance weights for prototypes
inc_prototypes["Weights of Prototypes"] = np.around(W/np.sum(W), 2) 
inc_prototypes